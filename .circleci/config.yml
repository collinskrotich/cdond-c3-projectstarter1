version: 2.1

orbs: 
  slack: circleci/slack@4.10.1


commands:
  install-awscli:
    description: "install aws cli"
    steps:
      - run:
          name: "install aws cli"
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo apt install python3-pip
            pip3 install awscli 
            sudo ./aws/install
          
          
  install-nodejs:
    description: "install nodejs"
    steps:
      - run:
          name: "install nodejs"
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs


  install-ansible:
        steps:
        - run:
            name: "Install Ansible"
            command: |
              sudo apt-get update 
              sudo apt install software-properties-common -y
              sudo add-apt-repository ppa:ansible/ansible -y
              sudo apt-get install -y ansible


  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure "https://kvdb.io/Amgpg7uReV59LAFJfgg44h/migration_<<parameters.workflow_id>>")
            if(( $SUCCESS==1 )); 
            then
             cd ~/project/backend
             npm install
             npm run migrate:revert
            fi
            
jobs:
  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
              
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test

            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
    # Checkout code from git
        - checkout
    # Restore from cache
        - attach_workspace:
            at: ~/
    # Your job code here
        - run:
            name: Scan front-end
            command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical
                        

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
        - checkout
  #     # Restore from cache
        - attach_workspace:
            at: ~/
  #     # Your job code here
        - run:
            name: Scan back-end
            command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
         name: Install tar & gzip
         command: |
          yum -y install tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend-"${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags "Name=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
   
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name udapeople-frontend-"${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags "Name=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            export TERM=msys
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters Name=tag:Name,Values=udapeople-backend-"${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "$BACKEND_AWS_PUBLIC_IP" >> .circleci/ansible/inventory.txt
            echo "http://$BACKEND_AWS_PUBLIC_IP:3030" 
            cd .circleci/ansible
            cat inventory.txt
           
         
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - output.txt

      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"    

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
     - image: cimg/base:stable 
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "c1:a8:b1:8b:50:da:7c:52:52:36:c4:59:40:53:e7:fb"
      # attach workspace
      - attach_workspace:
          at: ~/
      # Run ansible playbook
      - install-ansible

      - run:
          name: Configure server
          command: |
             cat .circleci/ansible/inventory.txt
             export ANSIBLE_HOST_KEY_CHECKING=False
             ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: sleavely/node-awscli:14.x
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            npm run migrations > migrations_dump.txt

      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/$Amgpg7uReV59LAFJfgg44h/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi

      - destroy-environment:
         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
         #test    

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "c1:a8:b1:8b:50:da:7c:52:52:36:c4:59:40:53:e7:fb"
      - attach_workspace:
          at: ~/
      - install-nodejs
      - install-awscli
      - install-ansible

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \ 
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:Name,Values=backend-prod$-"{CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
             cd frontend
             sudo npm install -g npm@latest
             rm -rf node_modules
             npm install
             npm run build
             aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive

       # Here's where you will add some code to rollback on failure
      - destroy-environment:
           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
      - revert-migrations:
           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "c1:a8:b1:8b:50:da:7c:52:52:36:c4:59:40:53:e7:fb"
      - attach_workspace:
          at: ~/
      - install-nodejs
      - install-ansible
      - install-awscli

      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..

            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            # mkdir files
            # cd files
            
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: cimg/base:stable
      
    steps:
      # Checkout code from git
      - checkout
      - install-nodejs
      - install-awscli

      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \ 
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:Name,Values=backend-prod$-"{CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            echo ${API_URL}
            if curl -s "${API_URL}/api/status" | grep "ok"
            then
            return 1
            else
            return 0
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                  # Change this to 0 after the job fails
                return 1
              else
                return 1
              fi
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
      - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
            
#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - notify:
          context: slack-secrets
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]